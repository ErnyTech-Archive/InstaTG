#!/usr/bin/env perl
=comment
    Include Acme::Comment module for best style of comments
    For comments then we will use the C style with one_line enabled
=cut

use Acme::Comment type => 'C', one_line=>1;


/*
    InstaTG
    A Telegram BOT for Insta....
    Copyright 2017 Ernesto Castellotti <erny.castell@gmail.com>
*/


/*
    Include module
    LWP::Simple, for simple web request (es get)
    LWP::Protocol::https, for https protocol request
    JSON, for decode Json
    WWW::Telegram::BotAPI, for Telegram request
*/

use LWP::Simple;
use LWP::Protocol::https;
use JSON;
use WWW::Telegram::BotAPI;
use IO::Handle;


/*
    Read the json configuration file and assign the related variables
*/    
my $json_config;
{
  local $/;
  /*
    The file must be placed in the same directory as instatg
  */  
  
  open my $fh, "<", "./config.json";
  $json_config = <$fh>;
  
  /*
  File closed
  */
  close $fh;
  
}

/*
    Variable declaration
    $config, contains the decoded json file for the configurations
    $user_insta, the user taken from the configurations for updates
    @sendid_telegram, array which contains all the telegram chats in which to send the posts
    $time_update, the update time chosen in the config
    $bot_token, is used to send telegram requests
    $insta_url, contains the URL of the insta....
    $insta_api, contains the argument to take the feed from insta.... API
    $insta, it's the complete url to get the feed
    $insta_id_old, the previous insta.... id
    $insta_id, the current insta....id
    $insta_photo, the current photo link
    $insta_caption, the current caption text
    $post_url, the current post url
    $post_urlre, the current post url redirected
    $insta_feedjson, the insta.... json feed
    $insta_feed, the decoded insta.... feed
    
*/


my $config = decode_json($json_config);
my $user_insta = $config->{'user-insta'};
my @sendid_telegram = @{$config->{'sendid-telegram'}};
my $time_update = $config->{'time-update'};
my $bot_token = $config->{'bot-token'};
my $insta_url = $config->{'insta_url'};
my $insta_api = $config->{'insta_api'};
my $insta=$insta_url . $user_insta . $insta_api;
my $insta_id_old = $_[1];
my $insta_id = '';
my $insta_photo = '';
my $insta_caption = '';
my $post_url = '';
my $post_urlre = '';


/*
    Create an unconditional while loop to continue searching for updates from the insta feed ....
    sleep() slows down the search depending on the configuration
*/


while (1)
{
  reloadConf();
  feed($_[0], @ARGV);
  sleep($time_update);
}

sub feed {
  if (@ARGV > 0) {
    my $levelPost = $ARGV[0];
    $ARGV[0] = 1;
  else {
    my $levelPost = 0;
  }
  
  /*
     Get the insta.... json feed
     Use a get request for assign to the variable $insta_feedjson the insta.... feed
     The url for get request is in the variable $insta_url
  */
    my $insta_feedjson;
    eval {
        $insta_feedjson = get($insta);
    } or do {
        print("Can't get feed\n");
        return;
    };

  /*
     Decode the insta.... json feed with JSON module and set decoded in variable $insta_feed
     The json feed to decode is in the variable $insta_feedjson
  */
    my $insta_feed;
    eval {
        $insta_feed = decode_json($insta_feedjson);
    } or do {
        print("Can't decode feed\n");
        return;
    };
  /*
     Set a variable 
     $insta_photo from user->media->nodes[0]->display_src 
     $insta_caption user->media->nodes[0]->caption
     $insta_id user->media->nodes[0]->id
     $post_url user->media->nodes[0]->code
     $post_urlre url of the post is redirected through a simple php page, for not create problems with the preview of telegram
     This set only the first nodes (nodes[0]) for get only lasted post on insta....
  */

  $insta_photo = $insta_feed->{'user'}->{'media'}->{'nodes'}->[$levelPost]->{'display_src'};
  $insta_caption = $insta_feed->{'user'}->{'media'}->{'nodes'}->[$levelPost]->{'caption'};
  $insta_id = $insta_feed->{'user'}->{'media'}->{'nodes'}->[$levelPost]->{'id'};
  $post_url = $insta_feed->{'user'}->{'media'}->{'nodes'}->[$levelPost]->{'code'};
  $is_video = $insta_feed->{'user'}->{'media'}->{'nodes'}->[$levelPost]->{'is_video};
  
  if ($ARGV[1]) {
    $insta_id_old = $insta_id;
    $ARGV[1] = false;
    next;
  }

  /*
      Check if $insta_photo_old variable and $insta_photo is equals
      Same thing with $insta_caption_old variable and $insta_caption
  */

  if ($insta_id eq $insta_id_old)
  {
    print("No need post\n");
  } else {
    $insta_id_old=$insta_id;
    foreach my $id (@sendid_telegram) {
        sendPost($insta_photo, $insta_caption, $post_url, $id, $is_video);
    }
  }
}

sub sendPost {
    my $media_msg = $_[0];
    my $caption_msg = $_[1];
    my $url = $_[2];
    my $send_id = $_[3];
    my $is_video = $_[4];
    if ($is_video) {
        sendPostVideo($media_msg, $caption_msg, $url, $send_id);
    } else {
         sendPostPhoto($media_msg, $caption_msg, $url, $send_id);
    }
}

sub sendPostPhoto {
  my $photo_msg = $_[0];
  my $caption_msg = $_[1];
  my $url = $_[2];
  my $send_id = $_[3];
  my $api = WWW::Telegram::BotAPI->new (token => $bot_token);
  if (length($caption_msg) <= '200') {
    $api->sendPhoto ({
      chat_id => $send_id,
      photo   => $photo_msg,
      caption => "$caption_msg\nVai al post: \n$url"
    });
  } else {
      $api->sendMessage ({
      chat_id => $send_id,
      text   => "$caption_msg\nVai al post: ",
      parse_mode   => "markdown"
    });
      $api->sendPhoto ({
      chat_id => $send_id,
      photo   => $photo_msg,
    });
  }
}

sub sendPostVideo {
  my $caption_msg = $_[0];
  my $url = $_[1];
  my $send_id = $_[2];
  my $video_msg = getVideo($url);
  my $api = WWW::Telegram::BotAPI->new (token => $bot_token);
  if (length($caption_msg) <= '200') {
    $api->sendVideo ({
      chat_id => $send_id,
      video   => $video_msg,
      caption => "$caption_msg\nVai al post: \n$url"
    });
  } else {
      $api->sendMessage ({
      chat_id => $send_id,
      text   => "$caption_msg\nVai al post: \n$url\n\n[.]($photo_msg)",
      parse_mode   => "markdown"
    });
      $api->sendVideo ({
      chat_id => $send_id,
      video   => $video_msg;
    });
  }
}

sub getVideo {
    my $post_link = $_[0];
    my $cmd = "curl $post_link 2>&1";
    my @html = qx($cmd);	
    my @video = grep(/og:video:secure_url/, @html);
    $video[0] =~ s/<meta property="og:video:secure_url" content="//;
    my $e = '" />';
    $video[0] =~ s/$e//;
    $video[0] =~ s/^\s+//;
    $video[0] =~ s/\s+$//;
    return $video[0];
}

sub reloadConf {
    {
        local $/;
        /*
        The file must be placed in the same directory as instatg
        */  
  
        open my $fh, "<", "./config.json";
        $json_config = <$fh>;
  
        /*
        File closed
        */
        close $fh;
    }
   
    $config = decode_json($json_config);
    $user_insta = $config->{'user-insta'};
    @sendid_telegram = @{$config->{'sendid-telegram'}};
    $time_update = $config->{'time-update'};
    $bot_token = $config->{'bot-token'};
    $insta_url = $config->{'insta_url'};
    $insta_api = $config->{'insta_api'};
    $insta=$insta_url . $user_insta . $insta_api; 
} 
  



